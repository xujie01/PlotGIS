define(["dojo/_base/declare","dojo/_base/lang","dojo/_base/connect","dojo/_base/array","dojo/_base/Color","dojo/has",    "esri/kernel","esri/lang","esri/toolbars/draw","./_BoxEx","./_GraphicMoverEx","./_VertexEditorEx",    "esri/symbols/SimpleMarkerSymbol","esri/symbols/SimpleLineSymbol"],     function (declare, lang, connect, array, Color, has, kernel, esriLang, Draw, BoxEx, GraphicMoverEx,              VertexEditorEx, SimpleMarkerSymbol, SimpleLineSymbol) {    var clazz = declare(Draw, {        declaredClass: "esri.toolbars.EditEx",        map:null,        toolType:null,        scratchGL:null,        defaultOptions:null,        editGraphic:null,        modified:null,        graphicMover:null,        vertexEditor:null,        boxEditor:null,        _options:null,//不能改名        _draw:null,        _geo:null,        constructor: function (map, options, toolbar) {            this.map = map;            this.toolType = 0;            this._draw = toolbar;            if (this.map.loaded) {                this.scratchGL = map.graphics            } else {                var mapLoadHandler = connect.connect(this.map, "onLoad", this, function () {                    connect.disconnect(mapLoadHandler);                    mapLoadHandler = null;                    this.scratchGL = this.map.graphics                })            }            var touchPointer = has("esri-touch") || has("esri-pointer");            this.defaultOptions = lang.mixin({                vertexSymbol: new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 6,                    new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0, 0.5]), 1),                    new Color([128, 128, 128])),                ghostVertexSymbol: new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 6,                    new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0, 0.5]), 1),                    new Color([255, 255, 255, 0.75])),                ghostLineSymbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_DOT, new Color([128, 128, 128]), 2),                allowDeleteVertices: true,                allowAddVertices: true,                rotateHandleOffset: touchPointer ? 24 : 30,                boxLineSymbol: new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([64, 64, 64]), 1),                boxHandleSymbol: new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_SQUARE, touchPointer ? 10 : 8,                    new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0, 0.5]), 1),                    new Color([255, 255, 255, 0.75])),                controlPointSymbol: new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_SQUARE, 8,                    new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0]), 0.75),                    new dojo.Color("#00FF7F"))            }, options || {})        },        activate: function (editType, graphic, options) {            this.deactivate();            this.editGraphic = graphic;            this._options = lang.mixin(lang.mixin({}, this.defaultOptions), options || {});            var editMove = clazz.MOVE;            var editVertices = clazz.EDIT_VERTICES;            var editScale = clazz.SCALE;            var editRotate = clazz.ROTATE;            var enableMove = false;            var enableVerterx = false;            var enableBoxEdit = false;            var mouse = graphic.geometry.spatialReference;            this._geo = !(!this.map.spatialReference || !mouse || this.map.spatialReference.equals(mouse) ||                !(this.map.spatialReference.isWebMercator() && 4326 === mouse.wkid));            (editType & editMove) === editMove && (enableMove = this.enableMoveHandler(graphic));            var editS = (editType & editScale) === editScale;            var editR = (editType & editRotate) === editRotate;            if (editS || editR) {                enableBoxEdit = this.enableBoxEditHandler(graphic, editS, editR)            }            (editType & editVertices) === editVertices && (enableVerterx = this.enableVertexEditHandler(graphic));            if (!enableMove && !enableVerterx && !enableBoxEdit) {                throw Error("[esri.toolbars.Edit::activate] Unable to activate the tool. Check if the tool is valid for the given geometry type.")            }            if (this.toolType = editType) {                this.mapPanEndConnect = connect.connect(this.map, "onPanEnd", this, this.mapPanEndHandler);                this.mapExtChgConnect = connect.connect(this.map, "onExtentChange", this, this.mapExtentChangeHandler);                this.onActivate(this.toolType, graphic)            }        },        deactivate: function () {            if (this.toolType) {                this.clear();                connect.disconnect(this.mapPanEndConnect);                connect.disconnect(this.mapExtChgConnect);                this.editGraphic = this._geo = this.mapPanEndConnect = this.mapExtChgConnect = null;                this.onDeactivate(this.toolType, this.editGraphic, {isModified: this.modified});            }        },        refresh: function () {            this.refreshMoveables(true)        },        //自定义函数-----------------------------------------------------------------------------------------------------        enableMoveHandler: function (graphic) {            switch (graphic.geometry.type) {                case"point":                case"polyline":                case"polygon":                    this.graphicMover = new GraphicMoverEx(graphic, this.map, this);                    return true            }            return false        },        enableBoxEditHandler: function (graphic, editT, editS) {            switch (graphic.geometry.type) {                case"polyline":                case"polygon":                    this.boxEditor = new BoxEx(graphic, this.map, this, editT, editS, this._options.uniformScaling);                    return true            }            return false        },        enableVertexEditHandler: function (graphic) {            switch (graphic.geometry.type) {                case"multipoint":                case"polyline":                case"polygon":                    this.vertexEditor = VertexEditorEx.create(graphic, this.map, this);                    return true            }            return false        },        clear: function () {            this.disableMoveHandler();            this.disableVertexEditHandler();            this.disableBoxEditHandler();            this.toolType = 0;            this.modified = false        },        disableMoveHandler: function () {            this.graphicMover && (this.graphicMover.destroy(), this.graphicMover = null)        },        disableVertexEditHandler: function () {            this.vertexEditor && (this.vertexEditor.destroy(), this.vertexEditor = null)        },        disableBoxEditHandler: function () {            this.boxEditor && (this.boxEditor.destroy(), this.boxEditor = null)        },        beginOperation: function (mouse) {            array.forEach(this.getAffectedTools(mouse), function (types) {                types.suspend()            })        },        endOperation: function (type) {            array.forEach(this.getAffectedTools(type), function (types) {                types.resume()            })        },        getAffectedTools: function (type) {            var types = [];            switch (type) {                case"MOVE":                    types = [this.vertexEditor, this.boxEditor];                    break;                case"VERTICES":                    types = [this.boxEditor];                    break;                case"BOX":                    types = [this.vertexEditor]            }            return types = array.filter(types, esriLang.isDefined)        },        onActivate: function (toolType, graphic) {        },        onDeactivate: function (toolType, graphic, isModified) {        },        getCurrentState: function () {            return {tool: this.toolType, graphic: this.editGraphic, isModified: this.modified}        },        onGraphicMoveStart: function (graphic) {        },        onGraphicFirstMove: function (graphic) {            this.modified = true        },        onGraphicMove: function (graphic, mouse) {        },        onGraphicMoveStop: function (graphic, mouse) {        },        onGraphicClick: function (graphic, mouse) {        },        onVertexMoveStart: function (graphic, mouse) {        },        onVertexFirstMove: function (graphic, mouse) {            this.modified = true        },        onVertexMove: function (graphic, graphicInfo, mouse) {        },        onVertexMoveStop: function (graphic, graphicInfo, mouse) {        },        onVertexAdd: function (graphic, mouse) {            this.modified = true        },        onVertexClick: function (graphic, mouse) {        },        onVertexMouseOver: function (graphic, mouse) {        },        onVertexMouseOut: function (graphic, mouse) {        },        onVertexDelete: function (graphic, mouse) {            this.modified = true        },        onScaleStart: function (graphic) {        },        onScaleFirstMove: function (graphic) {            this.modified = true        },        onScale: function (graphic, mouse) {        },        onScaleStop: function (graphic, mouse) {        },        onRotateStart: function (graphic) {        },        onRotateFirstMove: function (mougraphicse) {            this.modified = true        },        onRotate: function (graphic, mouse) {        },        onRotateStop: function (graphic, mouse) {        },        mapPanEndHandler: function () {            this.refreshMoveables()        },        refreshMoveables: function (options) {            var graphics = array.filter([this.graphicMover, this.vertexEditor, this.boxEditor], esriLang.isDefined);            array.forEach(graphics, function (graphic) {                graphic.refresh(options)            })        },        mapExtentChangeHandler: function (delta, extent, levelChange) {            levelChange && this.refreshMoveables()        }        //--------------------------------------------------------------------------------------------------------------    });    lang.mixin(clazz, {MOVE: 1, EDIT_VERTICES: 2, SCALE: 4, ROTATE: 8});    has("extend-esri") && lang.setObject("toolbars.Edit", clazz, kernel);    return clazz});