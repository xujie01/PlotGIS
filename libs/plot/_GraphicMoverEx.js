define(["dojo/_base/declare","dojo/_base/lang","dojo/_base/connect","dojo/_base/json","dojo/has","dojo/dom-style",    "dojox/gfx/Moveable","dojox/gfx/Mover","dojox/gfx/matrix","esri/kernel","esri/geometry/webMercatorUtils",    "esri/geometry/ScreenPoint"],    function (declare, lang, connect, JSON, has, domStyle, Moveable, Mover, matrix, kernel, webMercatorUtils, ScreenPoint) {    var clazz = declare(null, {        declaredClass: "esri.toolbars._GraphicMoverEx",        graphic:null,        controlPoints:null,        map:null,        toolbar:null,        moved:null,        startGraphic:null,                constructor: function (graphic, map, toolbar) {            this.graphic = graphic;            if (graphic.geometry.controlPoints) {                this.controlPoints = graphic.geometry.controlPoints            }            this.map = map;            this.toolbar = toolbar;            this.enableGraphicMover();            this.moved = false        },        refresh: function (options) {            var dojoShape = this.graphic.getDojoShape();            if (dojoShape && (options || !dojoShape._hostGraphic)) {                this.disableGraphicMover();                this.enableGraphicMover();            }        },        destroy: function () {            this.disableGraphicMover()        },        hasMoved: function () {            return this.moved        },        //自定义函数-----------------------------------------------------------------------------------------------------        enableGraphicMover: function () {            var graphic = this.graphic, dojoShape = graphic.getDojoShape();            if(dojoShape){                dojoShape._hostGraphic = graphic;                this.moveable = new Moveable(dojoShape, {mover: clazz.Mover});                this.moveStartConnect = connect.connect(this.moveable, "onMoveStart", this, this.moveStartHandler);                this.firstMoveConnect = connect.connect(this.moveable, "onFirstMove", this, this.firstMoveHandler);                this.movingConnect = connect.connect(this.moveable, "onMoving", this, this.movingHandler);                this.moveStopConnect = connect.connect(this.moveable, "onMoveStop", this, this.moveStopHandler);                (graphic = dojoShape.getEventSource()) && domStyle.set(graphic, "cursor", this.toolbar._cursors.move);            }        },        disableGraphicMover: function () {            var moveable = this.moveable;            if (moveable) {                connect.disconnect(this.moveStartConnect);                connect.disconnect(this.firstMoveConnect);                connect.disconnect(this.movingConnect);                connect.disconnect(this.moveStopConnect);                var moveableShape = moveable.shape;                moveableShape && (moveableShape._hostGraphic = null, (moveableShape = moveableShape.getEventSource()) && domStyle.set(moveableShape, "cursor", null));                moveable.destroy()            }            this.moveable = null        },        moveStartHandler: function () {            var graphic = this.graphic;            this.startGraphic = graphic.getDojoShape().getTransform();            "point" === this.graphic.geometry.type && this.map.snappingManager && this.map.snappingManager._setUpSnapping();            this.toolbar.onGraphicMoveStart(graphic)        },        firstMoveHandler: function () {            this.toolbar.beginOperation("MOVE");            this.toolbar.onGraphicFirstMove(this.graphic)        },        movingHandler: function (evt) {            this.toolbar.onGraphicMove(this.graphic, evt.shape.getTransform())        },        moveStopHandler: function (evt) {            var graphic = this.graphic;            var toolbar = this.toolbar;            var map = this.map;            var geometry = toolbar._geo ? webMercatorUtils.geographicToWebMercator(graphic.geometry) : graphic.geometry;            var geometryType = geometry.type;            var geoShape = graphic.getDojoShape();            var geometryShape = geoShape.getTransform();            if (JSON.toJson(geometryShape) !== JSON.toJson(this.startGraphic)) {                this.moved = true;                switch (geometryType) {                    case"point":                        var points = [geometryShape, matrix.invert(this.startGraphic)], snappingPoint;                        map.snappingManager && (snappingPoint = map.snappingManager._snappingPoint);                        geometry = snappingPoint || map.toMap(matrix.multiplyPoint(points, map.toScreen(geometry, true)));                        map.snappingManager && map.snappingManager._killOffSnapping();                        break;                    case"polyline":                        this.cpCount = 0;                        this.toolbar.scratchGL.graphics.forEach(function (scrGraphic, options) {                            if (scrGraphic.controlPoints) {                                var controlPnt = this.updateControlPt(geometry, scrGraphic.geometry, geometryShape);                                scrGraphic.setGeometry(toolbar._geo ? webMercatorUtils.webMercatorToGeographic(controlPnt, true) : controlPnt);                                this.controlPoints[this.cpCount++] = scrGraphic.geometry                            }                        }, this);                        geometry = this.updatePolyGeometry(geometry, geometry.paths, geometryShape);                        break;                    case"polygon":                        this.cpCount = 0;                        this.toolbar.scratchGL.graphics.forEach(function (scrGraphic, options) {                            if (scrGraphic.controlPoints) {                                var controlPnt = this.updateControlPt(geometry, scrGraphic.geometry, geometryShape);                                scrGraphic.setGeometry(toolbar._geo ? webMercatorUtils.webMercatorToGeographic(controlPnt, true) : controlPnt);                                this.controlPoints[this.cpCount++] = scrGraphic.geometry                            }                        }, this);                        geometry = this.updatePolyGeometry(geometry, geometry.rings, geometryShape)                }                geoShape.setTransform(null);                graphic.setGeometry(toolbar._geo ? webMercatorUtils.webMercatorToGeographic(geometry, true) : geometry)            } else {                this.moved = false            }            toolbar.endOperation("MOVE");            if (this.graphic.geometry.type === "polyline") {                this.enableGraphicMover()            }            this.toolbar.boxEditor.anchors.forEach(function (scrGraphic) {                scrGraphic.graphic.getDojoShape().moveToFront()            });            this.toolbar.scratchGL.graphics.forEach(function (scrGraphic, Y) {                if (scrGraphic.controlPoints) {                    scrGraphic.getDojoShape().moveToFront()                }            });            toolbar.onGraphicMoveStop(graphic, geometryShape);            this.moved || (evt = evt.__e, map = this.map.position, evt = new ScreenPoint(evt.pageX - map.x, evt.pageY - map.y),                 toolbar.onGraphicClick(graphic, {screenPoint: evt,mapPoint: this.map.toMap(evt)}));        },        updatePolyGeometry: function (geometry, geometryRings, geometryShape) {            var map = this.map;            var mapPnt = geometry.getPoint(0, 0);            var mapPoint = map.toMap(map.toScreen(mapPnt).offset(geometryShape.dx, geometryShape.dy));            geometryShape = mapPoint.x - mapPnt.x;            var geoOffset = mapPoint.y - mapPnt.y;            for (var i = 0; i < geometryRings.length; i++) {                var geoRing = geometryRings[i];                for (var j = 0; j < geoRing.length; j++) {                    var geoPnt = geometry.getPoint(i, j);                    geometry.setPoint(i, j, geoPnt.offset(geometryShape, geoOffset));                }            }            return geometry        },        updateControlPt: function (geometry1, geometry2, geometryShape) {            var map = this.map;            var geoPnt1 = geometry1.getPoint(0, 0);            var geoPnt2 = map.toMap(map.toScreen(geoPnt1).offset(geometryShape.dx, geometryShape.dy));            geometryShape = geoPnt2.x - geoPnt1.x;            var geoOffset = geoPnt2.y - geoPnt1.y;            geometry2 = geometry2.offset(geometryShape, geoOffset);            return geometry2        }        //--------------------------------------------------------------------------------------------------------------    });    clazz.Mover = declare(Mover, {        declaredClass: "esri.toolbars._MoverEx",        constructor: function (graphic, map, toolbar) {            this.__e = map;        }    });    has("extend-esri") && (lang.setObject("toolbars.GraphicMover", clazz, kernel), lang.setObject("toolbars._Mover", clazz.Mover, kernel));    return clazz});