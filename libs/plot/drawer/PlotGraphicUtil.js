define(["dojo/_base/lang", "esri/geometry/Point", "dojo/json", "esri/graphic"],    function (lang, Point, JSON, Graphic) {    var clazz = {};    clazz.toPlotJSONString = function (graphic) {        var controlPnts = [];        var controlPnts1 = graphic.geometry.controlPoints ? graphic.geometry.controlPoints : [];        var drawType = graphic.geometry.drawExtendType ? graphic.geometry.drawExtendType : "";        for (var i = 0; i < controlPnts1.length; i++) {            controlPnts.push(controlPnts1[i].toJson())        }        var graphicJSON = graphic.toJson();        var controlPoints = {};        controlPoints["self"] = graphicJSON;        controlPoints["controlPoints"] = controlPnts;        controlPoints["plotType"] = drawType;        return JSON.stringify(controlPoints)    };    clazz.toPlotJSON = function (graphic) {        var controlPnts = [];        var controlPoints1 = graphic.geometry.controlPoints;        var drawerType = graphic.geometry.drawExtendType;        for (var i = 0; i < controlPoints1.length; i++) {            controlPnts.push(controlPoints1[i].toJson())        }        var graphicJson = graphic.toJson();        var controlPoints = {};        controlPoints["self"] = graphicJson;        controlPoints["controlPoints"] = controlPnts;        controlPoints["plotType"] = drawerType;        return controlPoints    };    clazz.toPlotFromJSON = function (plotJson) {        var plotGraphic = plotJson["self"];        var graphic;        var controlPoints = [];        var controlPoints1 = plotJson.controlPoints;        graphic = new Graphic(plotGraphic);        for (var i = 0; i < controlPoints1.length; i++) {            controlPoints.push(new Point(controlPoints1[i]))        }        graphic.geometry.controlPoints = controlPoints;        graphic.geometry.drawExtendType = plotJson.plotType;        return graphic    };    clazz.toPlotFromJSONStr = function (plotJsonStr) {        var plotJson = JSON.parse(plotJsonStr);        return this.toPlotFromJSON(plotJson)    };    clazz.copyFromPlotGraphic = function (plotGraphic) {        return lang.clone(this, plotGraphic)    };    clazz.outPutPlotGraphicLayer2Txt = function (plotJson, filepath) {        filepath = "标绘";        var plotJsonStr = this.toPlotJSONString(plotJson);        var plotJsonStrE = encodeURI(plotJsonStr);        var aDiv = document.createElement("a");        aDiv.href = "data:attachment/txt," + plotJsonStrE;        aDiv.target = "blank";        aDiv.download = filepath + ".txt";        document.body.appendChild(aDiv);        aDiv.click()    };    clazz.outPutPlotGraphicLayer2Txt = function (plotObj, filepath) {        filepath = "标绘";        var graphics = plotObj.graphics;        var plotJsonStr = "";        for (var i = 0; i < graphics.length; i++) {            plotJsonStr += this.toPlotJSONString(graphics[i]) + ";"        }        plotJsonStr = plotJsonStr.substring(0, plotJsonStr.length - 1);        var plotJsonStrE = encodeURI(plotJsonStr);        var aDiv = document.createElement("a");        aDiv.href = "data:attachment/txt," + plotJsonStrE;        aDiv.target = "blank";        aDiv.download = filepath + ".txt";        document.body.appendChild(aDiv);        aDiv.click()    };    clazz.outPutPlotGraphicLayer2String = function (plotObj) {        var graphics = plotObj.graphics;        var plotJsonStr = "";        for (var i = 0; i < graphics.length; i++) {            plotJsonStr += this.toPlotJSONString(graphics[i]) + ";"        }        plotJsonStr = plotJsonStr.substring(0, plotJsonStr.length - 1);        var plotJsonStrE = encodeURI(plotJsonStr);        return plotJsonStrE    };    clazz.outPutPlotScreens2Txt = function (plotObj, filepath, map) {        filepath = "标绘";        var points = [];        var ringsPnts = plotObj.geometry.rings[0];        for (var i = 0; i < ringsPnts.length; i++) {            var ponit = new Point(ringsPnts[i][0], ringsPnts[i][1], map.spatialReference);            points.push([map.toScreen(ponit).x, map.toScreen(ponit).y])        }        //var jsonStr = JSON.stringify(points);        //var plotJsonStrE = encodeURI(jsonStr);        var plotJsonStrE = document.createElement("a");        plotJsonStrE.href = "data:attachment/txt," + plotJsonStrE;        plotJsonStrE.target = "blank";        plotJsonStrE.download = filepath + ".txt";        document.body.appendChild(plotJsonStrE);        plotJsonStrE.click()    };    clazz.getPlotLayerFromTxt = function (fileObj, plots) {        console.log("读取的txt: ", fileObj, ", ", fileObj.name, ", ", fileObj.type, ", ", fileObj.size);        var fileReader = new FileReader();        fileReader.onload = lang.hitch(this, function () {            var result = fileReader.result;            var points = result.split(";");            for (var i = 0; i < points.length; i++) {                var plot = this.toPlotFromJSONStr(points[i]);                plots.add(plot)            }        });        fileReader.readAsText(fileObj)    };    clazz.outPutPlotBoxGraphicLayer2String = function (plotBox) {        var boxGraphics = plotBox.boxGraphics;        var boxJsonStr = "";        for (var i = 0; i < boxGraphics.length; i++) {            boxJsonStr += this.toPlotBoxJSONString(boxGraphics[i]) + "@"        }        boxJsonStr = boxJsonStr.substring(0, boxJsonStr.length - 1);        var boxStr = (boxJsonStr);        return boxStr    };    clazz.toPlotBoxJSONString = function (plotBox) {        var boxJsonStr = {};        boxJsonStr["point"] = plotBox.geometry.point;        boxJsonStr["html"] = encodeURI(plotBox.geometry.html);        boxJsonStr["path"] = plotBox.geometry.path;        boxJsonStr["symbol"] = plotBox.symbol.toJson();        return JSON.stringify(boxJsonStr)    };    clazz.createBoxs2Layer = function (plotStr, boxLayer) {        var plotJsons = plotStr.split("@");        for (var i = 0; i < plotJsons.length; i++) {            var plotJson = JSON.parse(plotJsons[i]);            boxLayer.createPlotBoxByJSON(plotJson)        }    };    return clazz});